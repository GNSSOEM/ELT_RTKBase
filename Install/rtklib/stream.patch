diff --git a/src/stream.c b/src/stream.c
index f6d815e..15c7ea8 100644
--- a/src/stream.c
+++ b/src/stream.c
@@ -124,6 +124,9 @@
 
 #define MIN(x,y)            ((x)<(y)?(x):(y))
 
+#define MAX_PROGRESSIVE_TIMEOUT 300000 /* 5 minute = 300 000 ms */
+#define DROP_PROGRESSIVE_TIME   180000 /* 3 minute = 180 000 ms */
+
 /* macros --------------------------------------------------------------------*/
 
 #ifdef WIN32
@@ -164,6 +167,8 @@ typedef struct {            /* file control type */
 
 typedef struct {            /* tcp control type */
     int state;              /* state (0:close,1:wait,2:connect) */
+    int connect_state;      /* connect state (0:before connect,1:pause,2:connect in progress) */
+    int use_flag;           /* use flag (0:not,1:use) */
     char saddr[256];        /* address string */
     int port;               /* port */
     struct sockaddr_in addr; /* address resolved */
@@ -446,7 +451,7 @@ static serial_t *openserial(const char *path, int mode, char *msg)
         free(serial);
         return NULL;
     }
-    sprintf(msg,"%s",port);
+    sprintf(msg,"open %s",port);
 #else
     sprintf(dev,"/dev/%.*s",(int)sizeof(port)-6,port);
     
@@ -474,7 +479,7 @@ static serial_t *openserial(const char *path, int mode, char *msg)
     ios.c_cflag|=!strcmp(fctr,"rts")?CRTSCTS:0;
     tcsetattr(serial->dev,TCSANOW,&ios);
     tcflush(serial->dev,TCIOFLUSH);
-    sprintf(msg,"%s",dev);
+    sprintf(msg,"open %s",dev);
 #endif
     serial->tcpsvr=NULL;
     
@@ -1095,6 +1100,58 @@ static int send_nb(socket_t sock, uint8_t *buff, int n)
     ns=send(sock,(char *)buff,n,0);
     return ns<n?-1:ns;
 }
+/* get error text ------------------------------------------------------------*/
+static char errbuf[200];
+static char *errorstring(int err)
+{
+    strncpy(errbuf,strerror(err),sizeof(errbuf));
+    errbuf[sizeof(errbuf)-1] = 0;
+    int Len = (int)strlen(errbuf)-1;
+    while ((Len >= 0) && (errbuf[Len] < ' ')) --Len;
+    errbuf[Len+1] = 0;
+    return errbuf;
+}
+/* setup error flag ----------------------------------------------------------*/
+static char flagpath[MAXSTRPATH] = "";  /* flag file file path */
+extern void flagsetup(const char *path)
+{
+   strncpy(flagpath,path,MAXSTRPATH);
+   flagpath[MAXSTRPATH-1]=0;
+}
+/* create error flag ---------------------------------------------------------*/
+static void flagcreate(const char *msg)
+{
+    if (!*flagpath) return;
+    FILE *file=fopen(flagpath,"wt");
+    if (file) {
+        fputs(msg,file);
+        fclose(file);
+    }
+}
+/* erase error flag ----------------------------------------------------------*/
+static void flagerase(void)
+{
+    if (!*flagpath) return;
+    remove(flagpath);
+}
+/* disconnect tcp ------------------------------------------------------------*/
+static void discontcp(tcp_t *tcp, int tcon, const char *msg)
+{
+    tracet(3,"discontcp: sock=%d tcon=%d\n",tcp->sock,tcon);
+    if (tcp->use_flag)
+       flagcreate(msg);
+
+    closesocket(tcp->sock);
+    tcp->state=0;
+    tcp->connect_state=0;
+    if (tcp->tcon) {
+        tcp->tcon *= 2;
+        if (tcp->tcon>MAX_PROGRESSIVE_TIMEOUT)
+            tcp->tcon=MAX_PROGRESSIVE_TIMEOUT;
+    } else
+       tcp->tcon=tcon;
+    tcp->tdis=tickget();
+}
 /* generate tcp socket -------------------------------------------------------*/
 static int gentcp(tcp_t *tcp, int type, char *msg)
 {
@@ -1102,13 +1159,15 @@ static int gentcp(tcp_t *tcp, int type, char *msg)
 #ifdef SVR_REUSEADDR
     int opt=1;
 #endif
+    int err;
     
     tracet(3,"gentcp: type=%d\n",type);
     
     /* generate socket */
     if ((tcp->sock=socket(AF_INET,SOCK_STREAM,0))==(socket_t)-1) {
-        sprintf(msg,"socket error (%d)",errsock());
-        tracet(1,"gentcp: socket error err=%d\n",errsock());
+        int err=errsock();
+        sprintf(msg,"socket error %d (%s)",err,errorstring(err));
+        tracet(1,"gentcp: socket error err=%d\n",err);
         tcp->state=-1;
         return 0;
     }
@@ -1127,9 +1186,18 @@ static int gentcp(tcp_t *tcp, int type, char *msg)
         setsockopt(tcp->sock,SOL_SOCKET,SO_REUSEADDR,(const char *)&opt,
                    sizeof(opt));
 #endif
+        if (!(hp=gethostbyname(tcp->saddr))) {
+            if ((err=errsock())) {
+               sprintf(msg,"server address error %d (%s) at %s",err,errorstring(err),tcp->saddr);
+               tracet(1,"gentcp: gethostbyname error addr=%s err=%d\n",tcp->saddr,err);
+            }
+        } else
+            memcpy(&tcp->addr.sin_addr,hp->h_addr,hp->h_length);
+
         if (bind(tcp->sock,(struct sockaddr *)&tcp->addr,sizeof(tcp->addr))==-1) {
-            sprintf(msg,"bind error (%d) : %d",errsock(),tcp->port);
-            tracet(1,"gentcp: bind error port=%d err=%d\n",tcp->port,errsock());
+            err=errsock();
+            sprintf(msg,"bind error %d (%s) at %d",err,errorstring(err),tcp->port);
+            tracet(1,"gentcp: bind error port=%d err=%d\n",tcp->port,err);
             closesocket(tcp->sock);
             tcp->state=-1;
             return 0;
@@ -1138,31 +1206,20 @@ static int gentcp(tcp_t *tcp, int type, char *msg)
     }
     else { /* client socket */
         if (!(hp=gethostbyname(tcp->saddr))) {
-            sprintf(msg,"address error (%s)",tcp->saddr);
-            tracet(1,"gentcp: gethostbyname error addr=%s err=%d\n",tcp->saddr,errsock());
-            closesocket(tcp->sock);
-            tcp->state=0;
-            tcp->tcon=ticonnect;
-            tcp->tdis=tickget();
+            err=errsock();
+            sprintf(msg,"client address error %d (%s) at %s",err,errorstring(err),tcp->saddr);
+            tracet(1,"gentcp: gethostbyname error addr=%s err=%d\n",tcp->saddr,err);
+            discontcp(tcp, ticonnect, msg);
             return 0;
         }
         memcpy(&tcp->addr.sin_addr,hp->h_addr,hp->h_length);
     }
     tcp->state=1;
+    tcp->connect_state=0;
     tcp->tact=tickget();
     tracet(5,"gentcp: exit sock=%d\n",tcp->sock);
     return 1;
 }
-/* disconnect tcp ------------------------------------------------------------*/
-static void discontcp(tcp_t *tcp, int tcon)
-{
-    tracet(3,"discontcp: sock=%d tcon=%d\n",tcp->sock,tcon);
-    
-    closesocket(tcp->sock);
-    tcp->state=0;
-    tcp->tcon=tcon;
-    tcp->tdis=tickget();
-}
 /* open tcp server -----------------------------------------------------------*/
 static tcpsvr_t *opentcpsvr(const char *path, char *msg)
 {
@@ -1217,11 +1274,11 @@ static void updatetcpsvr(tcpsvr_t *tcpsvr, char *msg)
     }
     if (n==0) {
         tcpsvr->svr.state=1;
-        sprintf(msg,"waiting...");
+        /*sprintf(msg,"waiting...");*/
         return;
     }
     tcpsvr->svr.state=2;
-    if (n==1) sprintf(msg,"%s",saddr); else sprintf(msg,"%d clients",n);
+    /*if (n==1) sprintf(msg,"client %s",saddr); else sprintf(msg,"%d clients",n);*/
 }
 /* accept client connection --------------------------------------------------*/
 static int accsock(tcpsvr_t *tcpsvr, char *msg)
@@ -1242,7 +1299,7 @@ static int accsock(tcpsvr_t *tcpsvr, char *msg)
     }
     if ((sock=accept_nb(tcpsvr->svr.sock,(struct sockaddr *)&addr,&len))==(socket_t)-1) {
         err=errsock();
-        sprintf(msg,"accept error (%d)",err);
+        sprintf(msg,"accept error %d (%s)",err,errorstring(err));
         tracet(1,"accsock: accept error sock=%d err=%d\n",tcpsvr->svr.sock,err);
         closesocket(tcpsvr->svr.sock);
         tcpsvr->svr.state=0;
@@ -1254,11 +1311,12 @@ static int accsock(tcpsvr_t *tcpsvr, char *msg)
     tcpsvr->cli[i].sock=sock;
     memcpy(&tcpsvr->cli[i].addr,&addr,sizeof(addr));
     strcpy(tcpsvr->cli[i].saddr,inet_ntoa(addr.sin_addr));
-    sprintf(msg,"%s",tcpsvr->cli[i].saddr);
+    sprintf(msg,"accept client %s",tcpsvr->cli[i].saddr);
     tracet(3,"accsock: connected sock=%d addr=%s i=%d\n",
            tcpsvr->cli[i].sock,tcpsvr->cli[i].saddr,i);
     tcpsvr->cli[i].state=2;
     tcpsvr->cli[i].tact=tickget();
+    tcpsvr->cli[i].tcon=0;
     return 1;
 }
 /* wait socket accept --------------------------------------------------------*/
@@ -1286,12 +1344,17 @@ static int readtcpsvr(tcpsvr_t *tcpsvr, uint8_t *buff, int n, char *msg)
         if (tcpsvr->cli[i].state!=2) continue;
         
         if ((nr=recv_nb(tcpsvr->cli[i].sock,buff,n))==-1) {
-            if ((err=errsock())) {
-                tracet(2,"readtcpsvr: recv error sock=%d err=%d\n",
-                       tcpsvr->cli[i].sock,err);
+            err=errsock();
+            tracet(2,"readtcpsvr: recv error sock=%d err=%d\n", tcpsvr->cli[i].sock,err);
+            if ((err!=EALREADY) && (err!=EINPROGRESS)) {
+                if (err==0)
+                    sprintf(msg,"tcp server recv disconnected by %s",tcpsvr->cli[i].saddr);
+                else
+                    sprintf(msg,"tcp server recv error %d (%s) at %s",
+                            err,errorstring(err),tcpsvr->cli[i].saddr);
+                discontcp(&tcpsvr->cli[i],ticonnect,msg);
+                updatetcpsvr(tcpsvr,msg);
             }
-            discontcp(&tcpsvr->cli[i],ticonnect);
-            updatetcpsvr(tcpsvr,msg);
         }
         if (nr>0) {
             tcpsvr->cli[i].tact=tickget();
@@ -1313,11 +1376,16 @@ static int writetcpsvr(tcpsvr_t *tcpsvr, uint8_t *buff, int n, char *msg)
         if (tcpsvr->cli[i].state!=2) continue;
         
         if ((ns=send_nb(tcpsvr->cli[i].sock,buff,n))==-1) {
-            if ((err=errsock())) {
-                tracet(2,"writetcpsvr: send error i=%d sock=%d err=%d\n",i,
-                       tcpsvr->cli[i].sock,err);
-            }
-            discontcp(&tcpsvr->cli[i],ticonnect);
+            err=errsock();
+            tracet(2,"writetcpsvr: send error i=%d sock=%d err=%d\n",i,tcpsvr->cli[i].sock,err);
+            if (err) {
+               if ((err==EPIPE) && !recv(tcpsvr->cli[i].sock,(char *)buff,1,0))
+                  sprintf(msg,"tcp server send disconnected by %s",tcpsvr->cli[i].saddr);
+               else
+                   sprintf(msg,"tcp server send error %d (%s) at %s",err,errorstring(err),tcpsvr->cli[i].saddr);
+            } else
+                sprintf(msg,"tcp server send not all, disconnected by %s",tcpsvr->cli[i].saddr);
+            discontcp(&tcpsvr->cli[i],ticonnect,msg);
             updatetcpsvr(tcpsvr,msg);
         }
         else {
@@ -1374,28 +1442,46 @@ static int consock(tcpcli_t *tcpcli, char *msg)
     tracet(4,"consock: sock=%d\n",tcpcli->svr.sock);
     
     /* wait re-connect */
-    if (tcpcli->svr.tcon<0||(tcpcli->svr.tcon>0&&
-        (int)(tickget()-tcpcli->svr.tdis)<tcpcli->svr.tcon)) {
-        return 0;
+    if (tcpcli->svr.connect_state < 2) {
+       if (tcpcli->svr.tcon<0||(tcpcli->svr.tcon>0&&
+           (int)(tickget()-tcpcli->svr.tdis)<tcpcli->svr.tcon)) {
+           if (!tcpcli->svr.connect_state && !*msg) {
+              sprintf(msg,"tcp connect pause %d sec",tcpcli->svr.tcon/1000);
+              tcpcli->svr.connect_state = 1;
+           }
+           return 0;
+       }
     }
     /* non-block connect */
     if ((stat=connect_nb(tcpcli->svr.sock,(struct sockaddr *)&tcpcli->svr.addr,
                          sizeof(tcpcli->svr.addr)))==-1) {
         err=errsock();
-        sprintf(msg,"connect error (%d)",err);
+        sprintf(msg,"tcp connect error %d (%s) at %s",err,errorstring(err),tcpcli->svr.saddr);
         tracet(2,"consock: connect error sock=%d err=%d\n",tcpcli->svr.sock,err);
         closesocket(tcpcli->svr.sock);
         tcpcli->svr.state=0;
+        tcpcli->svr.connect_state=0;
         return 0;
     }
     if (!stat) { /* not connect */
-        sprintf(msg,"connecting...");
+        if ((tcpcli->svr.connect_state < 2) && !*msg) {
+           if (!tcpcli->svr.connect_state && (tcpcli->svr.tcon>0))
+               sprintf(msg,"tcp connecting after pause %d sec to %s in progress",tcpcli->svr.tcon/1000,tcpcli->svr.saddr);
+           else
+               sprintf(msg,"tcp connecting to %s in progress",tcpcli->svr.saddr);
+           tcpcli->svr.connect_state=2;
+        }
         return 0;
     }
-    sprintf(msg,"%s",tcpcli->svr.saddr);
+    if (!tcpcli->svr.connect_state && (tcpcli->svr.tcon>0))
+       sprintf(msg,"tcp connect after pause %d sec to %s",tcpcli->svr.tcon/1000,tcpcli->svr.saddr);
+    else
+       sprintf(msg,"tcp connect %s",tcpcli->svr.saddr);
     tracet(3,"consock: connected sock=%d addr=%s\n",tcpcli->svr.sock,tcpcli->svr.saddr);
     tcpcli->svr.state=2;
+    tcpcli->svr.connect_state=2;
     tcpcli->svr.tact=tickget();
+    tcpcli->svr.tdis=tcpcli->svr.tact;
     return 1;
 }
 /* open tcp client -----------------------------------------------------------*/
@@ -1410,7 +1496,7 @@ static tcpcli_t *opentcpcli(const char *path, char *msg)
     *tcpcli=tcpcli0;
     decodetcppath(path,tcpcli->svr.saddr,port,NULL,NULL,NULL,NULL);
     if (sscanf(port,"%d",&tcpcli->svr.port)<1) {
-        sprintf(msg,"port error: %s",port);
+        sprintf(msg,"tcp client port error: %s",port);
         tracet(2,"opentcp: port error port=%s\n",port);
         free(tcpcli);
         return NULL;
@@ -1444,9 +1530,16 @@ static int waittcpcli(tcpcli_t *tcpcli, char *msg)
     if (tcpcli->svr.state==2) { /* connect */
         if (tcpcli->toinact>0&&
             (int)(tickget()-tcpcli->svr.tact)>tcpcli->toinact) {
-            sprintf(msg,"timeout");
+            sprintf(msg,"tcp client inactive timeout %s",tcpcli->svr.saddr);
             tracet(2,"waittcpcli: inactive timeout sock=%d\n",tcpcli->svr.sock);
-            discontcp(&tcpcli->svr,tcpcli->tirecon);
+            discontcp(&tcpcli->svr,tcpcli->tirecon,msg);
+            return 0;
+        }
+        if (tcpcli->svr.tcon&&
+            (int)(tickget()-tcpcli->svr.tdis)>=DROP_PROGRESSIVE_TIME) {
+            sprintf(msg,"tcp client clean progressive timeout %s",tcpcli->svr.saddr);
+            tracet(2,"waittcpcli: clean progressive timeout sock=%d\n",tcpcli->svr.sock);
+            tcpcli->svr.tcon=0;
             return 0;
         }
     }
@@ -1462,14 +1555,15 @@ static int readtcpcli(tcpcli_t *tcpcli, uint8_t *buff, int n, char *msg)
     if (!waittcpcli(tcpcli,msg)) return 0;
     
     if ((nr=recv_nb(tcpcli->svr.sock,buff,n))==-1) {
-        if ((err=errsock())) {
-            tracet(2,"readtcpcli: recv error sock=%d err=%d\n",tcpcli->svr.sock,err);
-            sprintf(msg,"recv error (%d)",err);
-        }
-        else {
-            sprintf(msg,"disconnected");
+        err=errsock();
+        tracet(2,"readtcpcli: recv error sock=%d err=%d\n",tcpcli->svr.sock,err);
+        if ((err!=EALREADY) && (err!=EINPROGRESS)) {
+           if (err==0)
+               sprintf(msg,"tcp client recv disconnected by %s",tcpcli->svr.saddr);
+           else
+               sprintf(msg,"tcp client recv error %d (%s) at %s",err,errorstring(err),tcpcli->svr.saddr);
+           discontcp(&tcpcli->svr,tcpcli->tirecon,msg);
         }
-        discontcp(&tcpcli->svr,tcpcli->tirecon);
         return 0;
     }
     if (nr>0) tcpcli->svr.tact=tickget();
@@ -1486,11 +1580,16 @@ static int writetcpcli(tcpcli_t *tcpcli, uint8_t *buff, int n, char *msg)
     if (!waittcpcli(tcpcli,msg)) return 0;
     
     if ((ns=send_nb(tcpcli->svr.sock,buff,n))==-1) {
-        if ((err=errsock())) {
-            tracet(2,"writetcp: send error sock=%d err=%d\n",tcpcli->svr.sock,err);
-            sprintf(msg,"send error (%d)",err);
-        }
-        discontcp(&tcpcli->svr,tcpcli->tirecon);
+        err=errsock();
+        tracet(2,"writetcp: send error sock=%d err=%d\n",tcpcli->svr.sock,err);
+        if (err) {
+            if ((err==EPIPE) && !recv(tcpcli->svr.sock,(char *)buff,1,0))
+               sprintf(msg,"tcp client send disconnected by %s",tcpcli->svr.saddr);
+            else
+               sprintf(msg,"tcp client send error %d (%s) at %s",err,errorstring(err),tcpcli->svr.saddr);
+        } else
+            sprintf(msg,"tcp client send not all, disconnected by %s",tcpcli->svr.saddr);
+        discontcp(&tcpcli->svr,tcpcli->tirecon,msg);
         return 0;
     }
     if (ns>0) tcpcli->svr.tact=tickget();
@@ -1591,27 +1690,28 @@ static int rspntrip_s(ntrip_t *ntrip, char *msg)
         ntrip->nb-=p-q;
         for (i=0;i<ntrip->nb;i++) *q++=*p++;
         ntrip->state=2;
-        sprintf(msg,"%s/%s",ntrip->tcp->svr.saddr,ntrip->mntpnt);
+        sprintf(msg,"ntrip server connected to %s/%s",ntrip->tcp->svr.saddr,ntrip->mntpnt);
         tracet(3,"rspntrip_s: response ok nb=%d\n",ntrip->nb);
+        flagerase();
         return 1;
     }
     else if ((p=strstr((char *)ntrip->buff,NTRIP_RSP_ERROR))) { /* error */
         nb=ntrip->nb<MAXSTATMSG?ntrip->nb:MAXSTATMSG;
-        sprintf(msg,"%.*s",nb,(char *)ntrip->buff);
+        sprintf(msg,"ntrip server error %.*s",nb,(char *)ntrip->buff);
         if ((p=strchr(msg,'\r'))) *p='\0';
         tracet(3,"rspntrip_s: %s nb=%d\n",msg,ntrip->nb);
         ntrip->nb=0;
         ntrip->buff[0]='\0';
         ntrip->state=0;
-        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon);
+        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon,msg);
     }
     else if (ntrip->nb>=NTRIP_MAXRSP) { /* buffer overflow */
-        sprintf(msg,"response overflow");
+        sprintf(msg,"ntrip server response overflow to %s/%s",ntrip->tcp->svr.saddr,ntrip->mntpnt);
         tracet(3,"rspntrip_s: response overflow nb=%d\n",ntrip->nb);
         ntrip->nb=0;
         ntrip->buff[0]='\0';
         ntrip->state=0;
-        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon);
+        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon,msg);
     }
     tracet(5,"rspntrip_s: exit state=%d nb=%d\n",ntrip->state,ntrip->nb);
     return 0;
@@ -1632,19 +1732,20 @@ static int rspntrip_c(ntrip_t *ntrip, char *msg)
         ntrip->nb-=p-q;
         for (i=0;i<ntrip->nb;i++) *q++=*p++;
         ntrip->state=2;
-        sprintf(msg,"%s/%s",ntrip->tcp->svr.saddr,ntrip->mntpnt);
+        sprintf(msg,"ntrip client connect to %s/%s",ntrip->tcp->svr.saddr,ntrip->mntpnt);
         tracet(3,"rspntrip_c: response ok nb=%d\n",ntrip->nb);
         ntrip->tcp->tirecon=ticonnect;
+        flagerase();
         return 1;
     }
     if ((p=strstr((char *)ntrip->buff,NTRIP_RSP_SRCTBL))) { /* source table */
         if (!*ntrip->mntpnt) { /* source table request */
             ntrip->state=2;
-            sprintf(msg,"source table received");
+            sprintf(msg,"ntrip client source table received from %s",ntrip->tcp->svr.saddr);
             tracet(3,"rspntrip_c: receive source table nb=%d\n",ntrip->nb);
             return 1;
         }
-        sprintf(msg,"no mountp. reconnect...");
+        sprintf(msg,"ntrip client no mountpoint at %s/%s",ntrip->tcp->svr.saddr,ntrip->mntpnt);
         tracet(2,"rspntrip_c: no mount point nb=%d\n",ntrip->nb);
         ntrip->nb=0;
         ntrip->buff[0]='\0';
@@ -1652,24 +1753,24 @@ static int rspntrip_c(ntrip_t *ntrip, char *msg)
         /* increase subsequent disconnect time to avoid too many reconnect requests */
         if (ntrip->tcp->tirecon>300000) ntrip->tcp->tirecon=ntrip->tcp->tirecon*5/4;
 
-        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon);
+        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon,msg);
     }
     else if ((p=strstr((char *)ntrip->buff,NTRIP_RSP_HTTP))) { /* http response */
         if ((q=strchr(p,'\r'))) *q='\0'; else ntrip->buff[128]='\0';
-        strcpy(msg,p);
-        tracet(3,"rspntrip_s: %s nb=%d\n",msg,ntrip->nb);
+        sprintf(msg,"ntrip client error %s",p);
+        tracet(3,"rspntrip_c: %s nb=%d\n",msg,ntrip->nb);
         ntrip->nb=0;
         ntrip->buff[0]='\0';
         ntrip->state=0;
-        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon);
+        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon,msg);
     }
     else if (ntrip->nb>=NTRIP_MAXRSP) { /* buffer overflow */
-        sprintf(msg,"response overflow");
-        tracet(2,"rspntrip_s: response overflow nb=%d\n",ntrip->nb);
+        sprintf(msg,"ntrip client response overflow at %s",ntrip->tcp->svr.saddr);
+        tracet(2,"rspntrip_c: response overflow nb=%d\n",ntrip->nb);
         ntrip->nb=0;
         ntrip->buff[0]='\0';
         ntrip->state=0;
-        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon);
+        discontcp(&ntrip->tcp->svr,ntrip->tcp->tirecon,msg);
     }
     tracet(5,"rspntrip_c: exit state=%d nb=%d\n",ntrip->state,ntrip->nb);
     return 0;
@@ -1713,6 +1814,7 @@ static ntrip_t *openntrip(const char *path, int type, char *msg)
     char addr[256]="",port[256]="",tpath[MAXSTRPATH];
     
     tracet(3,"openntrip: path=%s type=%d\n",path,type);
+    flagcreate("Starting...");
     
     if (!(ntrip=(ntrip_t *)malloc(sizeof(ntrip_t)))) return NULL;
     
@@ -1744,6 +1846,7 @@ static ntrip_t *openntrip(const char *path, int type, char *msg)
         free(ntrip);
         return NULL;
     }
+    ntrip->tcp->svr.use_flag=1;
     return ntrip;
 }
 /* close ntrip ---------------------------------------------------------------*/
@@ -1753,6 +1856,7 @@ static void closentrip(ntrip_t *ntrip)
     
     closetcpcli(ntrip->tcp);
     free(ntrip);
+    flagerase();
 }
 /* read ntrip ----------------------------------------------------------------*/
 static int readntrip(ntrip_t *ntrip, uint8_t *buff, int n, char *msg)
@@ -1860,7 +1964,7 @@ static void discon_ntripc(ntripc_t *ntripc, int i)
 {
     tracet(3,"discon_ntripc: i=%d\n",i);
     
-    discontcp(&ntripc->tcp->cli[i],ticonnect);
+    discontcp(&ntripc->tcp->cli[i],ticonnect,"");
     ntripc->con[i].nb=0;
     ntripc->con[i].buff[0]='\0';
     ntripc->con[i].state=0;
@@ -1942,7 +2046,7 @@ static void rsp_ntripc(ntripc_t *ntripc, int i)
     con->state=1;
     strcpy(con->mntpnt,mntpnt);
 }
-/* handle ntrip client connect request ---------------------------------------*/
+/* handle ntrip caster client connect request --------------------------------*/
 static void wait_ntripc(ntripc_t *ntripc, char *msg)
 {
     uint8_t *buff;
@@ -1962,11 +2066,15 @@ static void wait_ntripc(ntripc_t *ntripc, char *msg)
         nmax=NTRIP_MAXRSP-ntripc->con[i].nb-1;
         
         if ((n=recv_nb(ntripc->tcp->cli[i].sock,buff,nmax))==-1) {
-            if ((err=errsock())) {
-                tracet(2,"wait_ntripc: recv error sock=%d err=%d\n",
-                       ntripc->tcp->cli[i].sock,err);
+            err=errsock();
+            tracet(2,"wait_ntripc: handshake recv error sock=%d err=%d\n",ntripc->tcp->cli[i].sock,err);
+            if ((err!=EALREADY) && (err!=EINPROGRESS)) {
+               if (err==0)
+                   sprintf(msg,"ntrip caster handshake recv disconnected by %s",ntripc->tcp->cli[i].saddr);
+               else
+                   sprintf(msg,"ntrip caster handshake recv error %d (%s) at %s",err,errorstring(err),ntripc->tcp->cli[i].saddr);
+               discon_ntripc(ntripc,i);
             }
-            discon_ntripc(ntripc,i);
             continue;
         }
         if (n<=0) continue;
@@ -1991,11 +2099,15 @@ static int readntripc(ntripc_t *ntripc, uint8_t *buff, int n, char *msg)
         nr=recv_nb(ntripc->tcp->cli[i].sock,buff,n);
         
         if (nr<0) {
-            if ((err=errsock())) {
-                tracet(2,"readntripc: recv error i=%d sock=%d err=%d\n",i,
-                       ntripc->tcp->cli[i].sock,err);
+            err=errsock();
+            tracet(2,"readntripc: recv error i=%d sock=%d err=%d\n",i,ntripc->tcp->cli[i].sock,err);
+            if ((err!=EALREADY) && (err!=EINPROGRESS)) {
+               if (err==0)
+                   sprintf(msg,"ntrip caster recv disconnected by %s",ntripc->tcp->cli[i].saddr);
+               else
+                   sprintf(msg,"ntrip caster recv error %d (%s) at %s",err,errorstring(err),ntripc->tcp->cli[i].saddr);
+               discon_ntripc(ntripc,i);
             }
-            discon_ntripc(ntripc,i);
         }
         else if (nr>0) {
             ntripc->tcp->cli[i].tact=tickget();
@@ -2019,10 +2131,15 @@ static int writentripc(ntripc_t *ntripc, uint8_t *buff, int n, char *msg)
         ns=send_nb(ntripc->tcp->cli[i].sock,buff,n);
         
         if (ns<n) {
-            if ((err=errsock())) {
-                tracet(2,"writentripc: send error i=%d sock=%d err=%d\n",i,
-                       ntripc->tcp->cli[i].sock,err);
-            }
+            err=errsock();
+            tracet(2,"writentripc: send error i=%d sock=%d err=%d\n",i,ntripc->tcp->cli[i].sock,err);
+            if (err) {
+                if ((err==EPIPE) && !recv(ntripc->tcp->cli[i].sock,(char *)buff,1,0))
+                   sprintf(msg,"ntrip caster send disconnected by %s",ntripc->tcp->cli[i].saddr);
+                else
+                    sprintf(msg,"ntrip caster send error %d (%s) at %s",err,errorstring(err),ntripc->tcp->cli[i].saddr);
+            } else
+                sprintf(msg,"ntrip caster send not all, disconnected by %s",ntripc->tcp->cli[i].saddr);
             discon_ntripc(ntripc,i);
         }
         else {
@@ -2066,7 +2183,7 @@ static udp_t *genudp(int type, int port, const char *saddr, char *msg)
 {
     udp_t *udp;
     struct hostent *hp;
-    int bs=buffsize,opt=1;
+    int bs=buffsize,opt=1,err;
     
     tracet(3,"genudp: type=%d\n",type);
     
@@ -2078,13 +2195,14 @@ static udp_t *genudp(int type, int port, const char *saddr, char *msg)
     
     if ((udp->sock=socket(AF_INET,SOCK_DGRAM,0))==(socket_t)-1) {
         free(udp);
-        sprintf(msg,"socket error (%d)",errsock());
+        err=errsock();
+        sprintf(msg,"udp socket error %d (%s)",err,errorstring(err));
         return NULL;
     }
     if (setsockopt(udp->sock,SOL_SOCKET,SO_RCVBUF,(const char *)&bs,sizeof(bs))==-1||
         setsockopt(udp->sock,SOL_SOCKET,SO_SNDBUF,(const char *)&bs,sizeof(bs))==-1) {
         tracet(2,"genudp: setsockopt error sock=%d err=%d bs=%d\n",udp->sock,errsock(),bs);
-        sprintf(msg,"sockopt error: bufsiz");
+        sprintf(msg,"udp sockopt error: bufsiz");
     }
     memset(&udp->addr,0,sizeof(udp->addr));
     udp->addr.sin_family=AF_INET;
@@ -2096,8 +2214,9 @@ static udp_t *genudp(int type, int port, const char *saddr, char *msg)
         setsockopt(udp->sock,SOL_SOCKET,SO_REUSEADDR,(const char *)&opt, sizeof(opt));
 #endif
         if (bind(udp->sock,(struct sockaddr *)&udp->addr,sizeof(udp->addr))==-1) {
-            tracet(2,"genudp: bind error sock=%d port=%d err=%d\n",udp->sock,port,errsock());
-            sprintf(msg,"bind error (%d): %d",errsock(),port);
+            err=errsock();
+            tracet(2,"genudp: bind error sock=%d port=%d err=%d\n",udp->sock,port,err);
+            sprintf(msg,"udp bind error %d (%s) at %d",err,errorstring(err),port);
             closesocket(udp->sock);
             free(udp);
             return NULL;
@@ -2108,10 +2227,10 @@ static udp_t *genudp(int type, int port, const char *saddr, char *msg)
             setsockopt(udp->sock,SOL_SOCKET,SO_BROADCAST,(const char *)&opt,
                        sizeof(opt))==-1) {
             tracet(2,"genudp: setsockopt error sock=%d err=%d\n",udp->sock,errsock());
-            sprintf(msg,"sockopt error: broadcast");
+            sprintf(msg,"udp sockopt error: broadcast");
         }
         if (!(hp=gethostbyname(saddr))) {
-            sprintf(msg,"address error (%s)",saddr);
+            sprintf(msg,"udp address error (%s)",saddr);
             closesocket(udp->sock);
             free(udp);
             return NULL;
@@ -2131,7 +2250,7 @@ static udp_t *openudpsvr(const char *path, char *msg)
     decodetcppath(path,NULL,sport,NULL,NULL,NULL,NULL);
     
     if (sscanf(sport,"%d",&port)<1) {
-        sprintf(msg,"port error: %s",sport);
+        sprintf(msg,"udp server port error: %s",sport);
         tracet(2,"openudpsvr: port error port=%s\n",port);
         return NULL;
     }
@@ -2190,7 +2309,7 @@ static udp_t *openudpcli(const char *path, char *msg)
     decodetcppath(path,saddr,sport,NULL,NULL,NULL,NULL);
     
     if (sscanf(sport,"%d",&port)<1) {
-        sprintf(msg,"port error: %s",sport);
+        sprintf(msg,"udp client port error: %s",sport);
         tracet(2,"openudpcli: port error port=%s\n",sport);
         return NULL;
     }
@@ -2440,7 +2559,7 @@ static int readftp(ftp_t *ftp, uint8_t *buff, int n, char *msg)
     }
     if (ftp->state<=0) { /* ftp/http not executed? */
         ftp->state=1;
-        sprintf(msg,"%s://%s",ftp->proto?"http":"ftp",ftp->addr);
+        sprintf(msg,"open %s://%s",ftp->proto?"http":"ftp",ftp->addr);
     
 #ifdef WIN32
         if (!(ftp->thread=CreateThread(NULL,0,ftpthread,ftp,0,NULL))) {
@@ -2473,7 +2592,7 @@ static int readftp(ftp_t *ftp, uint8_t *buff, int n, char *msg)
     ftp->tnext=nextdltime(ftp->topts,1);
     ftp->state=0;
     
-    strcpy(msg,"");
+    /*strcpy(msg,"");*/
     
     return (int)(p-buff);
 }
@@ -2936,7 +3055,11 @@ extern int strstat(stream_t *stream, char *msg)
     
     strlock(stream);
     if (msg) {
-        strncpy(msg,stream->msg,MAXSTRMSG-1); msg[MAXSTRMSG-1]='\0';
+        if (*stream->msg) {
+           strncpy(msg,stream->msg,MAXSTRMSG-1); msg[MAXSTRMSG-1]='\0';
+           *stream->msg = 0;
+        } else
+           *msg = 0;
     }
     if (!stream->port) {
         strunlock(stream);
