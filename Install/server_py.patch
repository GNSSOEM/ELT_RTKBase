diff --git a/web_app/server.py b/web_app/server.py
index 3dff915..652ea8a 100755
--- a/web_app/server.py
+++ b/web_app/server.py
@@ -108,7 +108,7 @@ services_list = [{"service_unit" : "str2str_tcp.service", "name" : "main"},
                  ]
 
 #Delay before rtkrcv will stop if no user is on status.html page
-rtkcv_standby_delay = 600
+rtkcv_standby_delay = 129600
 connected_clients = 0
 
 class StandaloneApplication(gunicorn.app.base.BaseApplication):
@@ -205,12 +205,15 @@ def repaint_services_button(services_list):
         result = exit-code => red button (danger)
     """ 
     for service in services_list:
-        if service.get("status") == "running":
-            service["btn_color"] = "success"
-        #elif service.get("status") == "dead":
-        #    service["btn_color"] = "danger"
+        if service.get("status") == "start":
+            service["btn_color"] = "info"
+        elif service.get("status") == "running":
+            if service == services_list[0] and os.path.exists(os.path.join(rtkbase_path, "GNSS_coordinate_error.flg")):
+                service["btn_color"] = "warning"
+            else:
+                service["btn_color"] = "success"
         elif service.get("result") == "exit-code":
-            service["btn_color"] = "warning"
+            service["btn_color"] = "danger"
         elif service.get("status") == "auto-restart":
             service["btn_color"] = "warning"
 
@@ -607,7 +610,7 @@ def deleteLog(json_msg):
 def detect_receiver(json_msg):
     print("Detecting gnss receiver")
     #print("DEBUG json_msg: ", json_msg)
-    answer = subprocess.run([os.path.join(rtkbase_path, "tools", "install.sh"), "--user", rtkbaseconfig.get("general", "user"), "--detect-gnss", "--no-write-port"], encoding="UTF-8", stderr=subprocess.PIPE, stdout=subprocess.PIPE, check=False)
+    answer = subprocess.run([os.path.join(rtkbase_path, "tools", "UnicoreConfigure.sh"), "--user", rtkbaseconfig.get("general", "user"), "--detect-gnss", "--no-write-port"], encoding="UTF-8", stderr=subprocess.PIPE, stdout=subprocess.PIPE, check=False)
     if answer.returncode == 0 and "/dev/" in answer.stdout:
         #print("DEBUG ok stdout: ", answer.stdout)
         try:
@@ -625,6 +628,20 @@ def detect_receiver(json_msg):
     #print('DEBUG result: ', result)
     socketio.emit("gnss_detection_result", json.dumps(result), namespace="/test")
 
+@socketio.on("detection_apply", namespace="/test")
+def detection_apply(json_msg):
+    print("Detection applied")
+    #print("DEBUG json_msg: ", json_msg)
+    msg = json.loads(json_msg)
+    port = os.path.basename(msg["port"])
+
+    receiver_conf = os.path.join(rtkbase_path, "receiver.conf")
+    with open(receiver_conf, "w") as f:
+        f.write("recv_port=" + port +"\n")
+        f.write("recv_speed=" + msg["port_speed"] + "\n")
+        f.write("recv_position=\n")
+        f.close()
+
 @socketio.on("configure_receiver", namespace="/test")
 def configure_receiver(brand="", model=""):
     # only some receiver could be configured automaticaly
@@ -639,7 +656,7 @@ def configure_receiver(brand="", model=""):
         restart_main = False
 
     print("configuring {} gnss receiver model {}".format(brand, model))
-    answer = subprocess.run([os.path.join(rtkbase_path, "tools", "install.sh"), "--user", rtkbaseconfig.get("general", "user"), "--configure-gnss"], encoding="UTF-8", stderr=subprocess.PIPE, stdout=subprocess.PIPE, check=False)
+    answer = subprocess.run([os.path.join(rtkbase_path, "tools", "UnicoreConfigure.sh"), "--user", rtkbaseconfig.get("general", "user"), "--configure-gnss"], encoding="UTF-8", stderr=subprocess.PIPE, stdout=subprocess.PIPE, check=False)
     #print("DEBUG - stdout: ", answer.stdout)
     #print("DEBUG - returncode: ", answer.returncode)
 
@@ -884,6 +901,7 @@ def switchService(json_msg):
             if json_msg["name"] == service["name"] and json_msg["active"] == True:
                 print("Trying to start service {}".format(service["name"]))
                 service["unit"].start()
+                service["btn_color"] = "info"
             elif json_msg["name"] == service["name"] and json_msg["active"] == False:
                 print("Trying to stop service {}".format(service["name"]))
                 service["unit"].stop()
